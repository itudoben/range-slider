/*
 * RangeSlider allows a range selection from X axis.
 * Copyright (C) <2012>  <itudoben at gmail dot com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import groovy.xml.NamespaceBuilder

import java.text.SimpleDateFormat

apply plugin: 'java'

defaultTasks 'clean', 'compileTest'

version = new SimpleDateFormat('yyyy.MM.dd.HHmmss').format(new Date())

configurations {
  compile {
    description = 'compile classpath'
    transitive = true
  }

  runtime {
    extendsFrom compile
  }
}

sourceSets {
  main {
    java {
      srcDir 'src/java'
    }
    resources {
      srcDir 'res'
    }
  }
}

libDir = 'libs'

dependencies {
  compile fileTree(dir: libDir, include: ['*.jar', '*.zip'])
}

sourceCompatibility = 6
targetCompatibility = 6

jar {
  archiveName = 'range-slider-' + version + '.jar'
}

task copyLibs(type: Copy) {
  from(libDir) {
    include '*.jar'
  }
  from(libDir) {
    include '*.zip'
  }
  into 'build/libs'
}

task copyRes(type: Copy) {
  from('src') {
    include '*.jnlp'
  }
  into 'build'
}

task(run, dependsOn: "jar", type: JavaExec) {
  doFirst {
    main = 'com.jh.rangeslider.Application'
    systemProperties = ['sswing.defaultlaf': 'com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel',
        'com.apple.mrj.application.apple.menu.about.name': 'Range Slider Example']
    maxHeapSize = '256M'
    classpath = sourceSets.main.runtimeClasspath

    //    println classpath.asPath
    //    String jarPath = relativePath(new File(libsDir, jar.archiveName))
  }
}

task showUserEnv {
  def env = System.getenv()
  println env['USER']
}

def env = System.getenv()

task release(dependsOn: ['clean', 'copyLibs', 'copyRes', 'jar']) {
  doLast {

    ant.replace(
        file: 'build/rangesliderexample.jnlp',
        token: 'replace-build.number',
        value: version
    )

    // Get signature passwords from user input.
    def console = System.console()
    def storepass = console.readPassword('%s: ', 'Please enter the storepass')
    def keypass = console.readPassword('%s: ', 'Please enter the keypass')

    ant.signjar(
        keystore: env['KEYSTORE_JH'],
        storepass: storepass as String,
        alias: env['KEYSTORE_JH_ALIAS'],
        keypass: keypass as String
    ) {
      fileset(dir: 'build/libs') {
        include(name: '*.jar')
      }
      fileset(dir: 'build/libs') {
        include(name: '*.zip')
      }
    }
  }
}

configurations {
  ftpAntTask
}

antLib = System.getenv('ANT_HOME') + '/lib'

dependencies {
  ftpAntTask files(
      antLib + '/ant-commons-net_1.7.0.jar',
      antLib + '/jakarta-oro-2.0.8.jar',
      antLib + '/commons-net_1.4.1.jar'
  )
}

atRemoteDir = 'rangeslider/'

task ftp << {

  // Get FTP password.
  def console = System.console()
  def passphrase = console.readPassword('%s: ',
      'Please enter the FTP password for ' + env['WEBSITE_FTP_USER_NAME'] + '@' + env['WEBSITE_FTP_SERVER'])

  ant {
    taskdef(
        name: 'ftp',
        classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
        classpath: configurations.ftpAntTask.asPath
    )
    ftp(
        server: env['WEBSITE_FTP_SERVER'],
        userid: env['WEBSITE_FTP_USER_NAME'],
        password: passphrase as String,
        action: 'send',
        remotedir: atRemoteDir,
        passive: true
    ) {
      fileset(dir: "build/libs")
      fileset(file: "build/rangesliderexample.jnlp")
    }
  }
}

/*

 Using Ivy for library dependencies

**/

ivyInstallVersion = '2.3.0-rc1'

antUserLocal = System.getProperty('user.home') + '/.ant'
antUserLocalLib = antUserLocal + '/lib'
localIvyJarFile = antUserLocalLib + '/ivy' + ivyInstallVersion + '.jar'

task downloadIvy << {

  ant {
    condition(property: 'online') {
      isreachable(url: 'http://search.maven.org', timeout: '10')
    }

    println 'offline prop: ' + ant.properties['online']

    mkdir(dir: antUserLocalLib)

    // download Ivy from web site and install in user home ant lib directory.
    get(
        src: 'http://repo2.maven.org/maven2/org/apache/ivy/ivy/' + ivyInstallVersion + '/ivy-' + ivyInstallVersion + '.jar',
        dest: localIvyJarFile,
        usetimestamp: 'true'
    )
  }
}

task updateLibraryCachex(/*dependsOn: 'downloadIvy'*/) << {

  ivyLibPath = fileTree(dir: antUserLocalLib, include: '*.jar')

  println '*** ivyLibPath: ' + ivyLibPath.asPath

  ivyLibPath.each { println it }

  ant.taskdef(
      resource: 'org/apache/ivy/ant/antlib.xml',
      uri: 'antlib:org.apache.ivy.ant',
      classpath: ivyLibPath.asPath
  )

// Properties used by Ivy for project.
  ant.properties['ivy.lib.dir'] = libDir


  def ivy = NamespaceBuilder.newInstance(ant, 'antlib:org.apache.ivy.ant')
  ivy.retrieve()
}

/*
<target name="run-with-ivyx"
        depends="cleanx, update-library-cachex"
        >

*/

//    try to load ivy here from ivy home, in case the user has not already dropped
//    it into ant's lib dir (note that the latter copy will always take precedence).
//    We will not fail as long as local lib dir exists (it may be empty) and
//    ivy is in at least one of ant's lib dir or the local lib dir.
//
//    <path id="ivy.lib.path">
//        <fileset dir="${antUserLocalLib}" includes="*.jar"/>
//    </path>
//
//    <taskdef resource="org/apache/ivy/ant/antlib.xml"
//             uri="antlib:org.apache.ivy.ant"
//             classpathref="ivy.lib.path"
//            />
